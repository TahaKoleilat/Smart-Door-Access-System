# -*- coding: utf-8 -*-
"""FYP_Project_MobileNet.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1iXoAnXT3kATTLjxrJ88O607tKIVH02wX
"""

!pip install opendatasets

import pandas as pd
import numpy as np
import os

import matplotlib.pyplot as plt
import seaborn as sns

import opendatasets as od

from keras.preprocessing.image import ImageDataGenerator
from keras.layers import Conv2D,Dense, MaxPooling2D,Flatten,Dropout,Activation, BatchNormalization
from tensorflow.keras.optimizers import Adam,RMSprop,SGD
from keras import regularizers
import tensorflow as tf
from keras.callbacks import ModelCheckpoint,EarlyStopping,ReduceLROnPlateau
import datetime
from tensorflow.keras.utils import plot_model

od.download("https://www.kaggle.com/datasets/sumansid/facemask-dataset",data_dir="dataset1")

od.download("https://www.kaggle.com/datasets/ahemateja19bec1025/facemask-dataset",data_dir="dataset2")

od.download("https://www.kaggle.com/datasets/vinaykudari/facemask",data_dir="dataset3")

od.download("https://www.kaggle.com/datasets/pranavsingaraju/facemask-detection-dataset-20000-images",data_dir="dataset4")

od.download("https://www.kaggle.com/datasets/ashiqurrahmantanzil/facemask-dataset",data_dir="dataset5")

od.download("https://www.kaggle.com/datasets/shiekhburhan/face-mask-dataset",data_dir="dataset6")

od.download("https://www.kaggle.com/datasets/ashishjangra27/face-mask-12k-images-dataset", data_dir = "dataset7")

od.download("https://www.kaggle.com/datasets/spandanpatnaik09/face-mask-detectormask-not-mask-incorrect-mask",data_dir = "dataset8")

# od.download("https://www.kaggle.com/datasets/ashwingupta3012/human-faces",data_dir = "dataset9")

!pip install split-folders

import splitfolders

import shutil

!mkdir CompleteDataset

!mkdir '/content/CompleteDataset/Mask'

!mkdir '/content/CompleteDataset/No Mask'

content_list = os.listdir('/content/dataset1/facemask-dataset/Mask')
for sub_dir in content_list:
  
    # loop through the contents of the
    # list of folders
    for contents in os.listdir(os.path.join('/content/dataset1/facemask-dataset/Mask',sub_dir)):
  
        # make the path of the content to move 
        path_to_content = sub_dir + "/" + contents  
  
        # make the path with the current folder
        dir_to_move = os.path.join('/content/dataset1/facemask-dataset/Mask',path_to_content)
  
        # move the file
        shutil.move(dir_to_move,'/content/CompleteDataset/Mask')

content_list = os.listdir('/content/dataset1/facemask-dataset/No Mask')
for sub_dir in content_list:
  
    # loop through the contents of the
    # list of folders
    for contents in os.listdir(os.path.join('/content/dataset1/facemask-dataset/No Mask',sub_dir)):
  
        # make the path of the content to move 
        path_to_content = sub_dir + "/" + contents  
  
        # make the path with the current folder
        dir_to_move = os.path.join('/content/dataset1/facemask-dataset/No Mask',path_to_content)
  
        # move the file
        shutil.move(dir_to_move,'/content/CompleteDataset/No Mask')

content_list = os.listdir('/content/dataset2/facemask-dataset/dataset/dataset')
for sub_dir in content_list:
  
    # loop through the contents of the
    # list of folders
    for contents in os.listdir(os.path.join('/content/dataset2/facemask-dataset/dataset/dataset',sub_dir)):
  
        # make the path of the content to move 
        path_to_content = sub_dir + "/" + contents  
  
        # make the path with the current folder
        dir_to_move = os.path.join('/content/dataset2/facemask-dataset/dataset/dataset',path_to_content)
  
        # move the file
        if(sub_dir == "1"):
          shutil.move(dir_to_move,'/content/CompleteDataset/No Mask')
        else:
          shutil.move(dir_to_move,'/content/CompleteDataset/Mask')

content_list = os.listdir('/content/dataset3/facemask/train')
for sub_dir in content_list:
  
    # loop through the contents of the
    # list of folders
    for contents in os.listdir(os.path.join('/content/dataset3/facemask/train',sub_dir)):
  
        # make the path of the content to move 
        path_to_content = sub_dir + "/" + contents  
  
        # make the path with the current folder
        dir_to_move = os.path.join('/content/dataset3/facemask/train',path_to_content)
  
        # move the file
        if(sub_dir == "without_mask"):
          shutil.move(dir_to_move,'/content/CompleteDataset/No Mask')
        elif(sub_dir == "with_mask"):
          shutil.move(dir_to_move,'/content/CompleteDataset/Mask')
        elif(sub_dir == "mask_weared_incorrect"):
          shutil.move(dir_to_move,'/content/CompleteDataset/No Mask')

content_list = os.listdir('/content/dataset4/facemask-detection-dataset-20000-images')
for sub_dir in content_list:
  
    # loop through the contents of the
    # list of folders
    for contents in os.listdir(os.path.join('/content/dataset4/facemask-detection-dataset-20000-images',sub_dir)):
  
        # make the path of the content to move 
        path_to_content = sub_dir + "/" + contents  
  
        # make the path with the current folder
        dir_to_move = os.path.join('/content/dataset4/facemask-detection-dataset-20000-images',path_to_content)
  
        # move the file
        if(sub_dir == "new_without_mask"):
          shutil.move(dir_to_move,'/content/CompleteDataset/No Mask')
        elif(sub_dir == "new_with_mask"):
          shutil.move(dir_to_move,'/content/CompleteDataset/Mask')

content_list = os.listdir('/content/dataset5/facemask-dataset/dataset_final')
for sub_dir in content_list:
  
    # loop through the contents of the
    # list of folders
    for contents in os.listdir(os.path.join('/content/dataset5/facemask-dataset/dataset_final',sub_dir)):
  
        # make the path of the content to move 
        path_to_content = sub_dir + "/" + contents  
  
        # make the path with the current folder
        dir_to_move = os.path.join('/content/dataset5/facemask-dataset/dataset_final',path_to_content)
  
        # move the file
        if(sub_dir == "without_mask"):
          shutil.move(dir_to_move,'/content/CompleteDataset/No Mask')
        elif(sub_dir == "with_mask"):
          shutil.move(dir_to_move,'/content/CompleteDataset/Mask')

content_list = os.listdir('/content/dataset6/face-mask-dataset/FMD_DATASET/with_mask')
for sub_dir in content_list:
  
    # loop through the contents of the
    # list of folders
    for contents in os.listdir(os.path.join('/content/dataset6/face-mask-dataset/FMD_DATASET/with_mask',sub_dir)):
  
        # make the path of the content to move 
        path_to_content = sub_dir + "/" + contents  
  
        # make the path with the current folder
        dir_to_move = os.path.join('/content/dataset6/face-mask-dataset/FMD_DATASET/with_mask',path_to_content)
  
        # move the file
        shutil.move(dir_to_move,'/content/CompleteDataset/Mask')

content_list = os.listdir('/content/dataset6/face-mask-dataset/FMD_DATASET/without_mask')
for sub_dir in content_list:
  
    # loop through the contents of the
    # list of folders
    for contents in os.listdir(os.path.join('/content/dataset6/face-mask-dataset/FMD_DATASET/without_mask',sub_dir)):
  
        # make the path of the content to move 
        path_to_content = sub_dir + "/" + contents  
  
        # make the path with the current folder
        dir_to_move = os.path.join('/content/dataset6/face-mask-dataset/FMD_DATASET/without_mask',path_to_content)
  
        # move the file
        shutil.move(dir_to_move,'/content/CompleteDataset/No Mask')

content_list = os.listdir('/content/dataset6/face-mask-dataset/FMD_DATASET/incorrect_mask')
for sub_dir in content_list:
  
    # loop through the contents of the
    # list of folders
    for contents in os.listdir(os.path.join('/content/dataset6/face-mask-dataset/FMD_DATASET/incorrect_mask',sub_dir)):
        os.rename(os.path.join('/content/dataset6/face-mask-dataset/FMD_DATASET/incorrect_mask',sub_dir,contents), os.path.join('/content/dataset6/face-mask-dataset/FMD_DATASET/incorrect_mask',sub_dir,"Dataset6INCORRECT"+contents))
        contents = "Dataset6INCORRECT" + contents
        # make the path of the content to move 
        path_to_content = sub_dir + "/" + contents  
  
        # make the path with the current folder
        dir_to_move = os.path.join('/content/dataset6/face-mask-dataset/FMD_DATASET/incorrect_mask',path_to_content)
  
        # move the file
        shutil.move(dir_to_move,'/content/CompleteDataset/No Mask')

# content_list = os.listdir('/content/dataset9/human-faces')
# for sub_dir in content_list:
  
#     # loop through the contents of the
#     # list of folders
#     for contents in os.listdir(os.path.join('/content/dataset9/human-faces',sub_dir)):
  
#         # make the path of the content to move 
#         path_to_content = sub_dir + "/" + contents  
  
#         # make the path with the current folder
#         dir_to_move = os.path.join('/content/dataset9/human-faces',path_to_content)
  
#         # move the file
#         shutil.move(dir_to_move,'/content/CompleteDataset/No Mask')

#Save zip files from https://github.com/cabani/MaskedFace-Net in your Google Drive

!mkdir dataset10
import zipfile
from google.colab import drive
drive.mount('/content/drive')
zip_ref = zipfile.ZipFile('/content/drive/MyDrive/CMFD.zip', 'r')
zip_ref.extractall('/content/dataset10/Mask')
zip_ref.close()
zip_ref = zipfile.ZipFile('/content/drive/MyDrive/IMFD.zip', 'r')
zip_ref.extractall('/content/dataset10/No Mask')
zip_ref.close()

sub_dir_list = os.listdir('/content/dataset10')
for sub_dir in sub_dir_list:
    sub_sub_dir_list = os.listdir(os.path.join('/content/dataset10',sub_dir))
    for sub_sub_dir in sub_sub_dir_list:
    # loop through the contents of the
    # list of folders
      for contents in os.listdir(os.path.join('/content/dataset10',sub_dir,sub_sub_dir)):
        os.rename(os.path.join('/content/dataset10',sub_dir,sub_sub_dir,contents), os.path.join('/content/dataset10',sub_dir,sub_sub_dir,"Dataset10"+contents))
        contents = "Dataset10" + contents
        # make the path of the content to move 
        path_to_content = sub_dir + '/' + sub_sub_dir + '/' + contents

        # make the path with the current folder
        dir_to_move = os.path.join('/content/dataset10/',path_to_content)
        

        # move the file
        if(sub_dir == "Mask"):
            shutil.move(dir_to_move,'/content/CompleteDataset/Mask')
        elif(sub_dir == "No Mask"):
            shutil.move(dir_to_move,'/content/CompleteDataset/No Mask')

!rm -rf "/content/dataset1"
!rm -rf "/content/dataset2"
!rm -rf "/content/dataset3"
!rm -rf "/content/dataset4"
!rm -rf "/content/dataset5"
!rm -rf "/content/dataset6"
!rm -rf "/content/dataset8"
!rm -rf "/content/dataset10"

zip_ref = zipfile.ZipFile('/content/drive/MyDrive/IMFD1.zip', 'r')
zip_ref.extractall('/content/dataset11/No Mask')
zip_ref.close()
# zip_ref = zipfile.ZipFile('/content/drive/MyDrive/CMFD1.zip', 'r')
# zip_ref.extractall('/content/dataset11/Mask')
# zip_ref.close()

sub_dir_list = os.listdir('/content/dataset11')
for sub_dir in sub_dir_list:
    sub_sub_dir_list = os.listdir(os.path.join('/content/dataset11',sub_dir))
    for sub_sub_dir in sub_sub_dir_list:
    # loop through the contents of the
    # list of folders
      for contents in os.listdir(os.path.join('/content/dataset11',sub_dir,sub_sub_dir)):
        os.rename(os.path.join('/content/dataset11',sub_dir,sub_sub_dir,contents), os.path.join('/content/dataset11',sub_dir,sub_sub_dir,"Dataset11"+contents))
        contents = "Dataset11" + contents
        # make the path of the content to move 
        path_to_content = sub_dir + '/' + sub_sub_dir + '/' + contents

        # make the path with the current folder
        dir_to_move = os.path.join('/content/dataset11/',path_to_content)
        

        # move the file
        if(sub_dir == "Mask"):
            shutil.move(dir_to_move,'/content/CompleteDataset/Mask')
        elif(sub_dir == "No Mask"):
            shutil.move(dir_to_move,'/content/CompleteDataset/No Mask')

!rm -rf "/content/dataset11"

splitfolders.ratio('/content/CompleteDataset', output="/content/CompleteDatasetNew", ratio=(0.8, 0.1,0.1), move= True)

sub_dir_list = os.listdir('/content/dataset7/face-mask-12k-images-dataset/Face Mask Dataset')
for sub_dir in sub_dir_list:
    sub_sub_dir_list = os.listdir(os.path.join('/content/dataset7/face-mask-12k-images-dataset/Face Mask Dataset',sub_dir))
    for sub_sub_dir in sub_sub_dir_list:
    # loop through the contents of the
    # list of folders
      for contents in os.listdir(os.path.join('/content/dataset7/face-mask-12k-images-dataset/Face Mask Dataset',sub_dir,sub_sub_dir)):
        os.rename(os.path.join('/content/dataset7/face-mask-12k-images-dataset/Face Mask Dataset',sub_dir,sub_sub_dir,contents), os.path.join('/content/dataset7/face-mask-12k-images-dataset/Face Mask Dataset',sub_dir,sub_sub_dir,"Dataset7"+contents))
        contents = "Dataset7" + contents
        # make the path of the content to move 
        path_to_content = sub_dir + '/' + sub_sub_dir + '/' + contents

        # make the path with the current folder
        dir_to_move = os.path.join('/content/dataset7/face-mask-12k-images-dataset/Face Mask Dataset/',path_to_content)
        

        # move the file
        if(sub_dir == "Test"):
          if(sub_sub_dir == "WithMask"):
            shutil.move(dir_to_move,'/content/CompleteDatasetNew/test/Mask')
          else:
            shutil.move(dir_to_move,'/content/CompleteDatasetNew/test/No Mask')
        elif(sub_dir == "Train"):
          if(sub_sub_dir == "WithMask"):
            shutil.move(dir_to_move,'/content/CompleteDatasetNew/train/Mask')
          else:
            shutil.move(dir_to_move,'/content/CompleteDatasetNew/train/No Mask')
        if(sub_dir == "Validation"):
          if(sub_sub_dir == "WithMask"):
            shutil.move(dir_to_move,'/content/CompleteDatasetNew/val/Mask')
          else:
            shutil.move(dir_to_move,'/content/CompleteDatasetNew/val/No Mask')

!rm -rf "/content/dataset7"

train_datagen = ImageDataGenerator(preprocessing_function=tf.keras.applications.mobilenet_v2.preprocess_input,rotation_range=2,
        width_shift_range=0.2,
        height_shift_range=0.2,
        shear_range=0.2,
        zoom_range=0.2,
        fill_mode='nearest')

valid_datagen = ImageDataGenerator(preprocessing_function=tf.keras.applications.mobilenet_v2.preprocess_input)

training_set  = train_datagen.flow_from_directory(directory = '/content/CompleteDatasetNew/train',
                                                   class_mode = 'binary',
                                                   color_mode="rgb",
                                                     target_size = (224,224),
                                                   classes={'No Mask': 0,'Mask': 1})
valid_set  = valid_datagen.flow_from_directory(directory = '/content/CompleteDatasetNew/val',
                                                   class_mode = 'binary',
                                                   color_mode="rgb",
                                                     target_size = (224,224),
                                                   classes={'No Mask': 0,'Mask': 1})
test_set  = valid_datagen.flow_from_directory(directory = '/content/CompleteDatasetNew/test',
                                                   class_mode = 'binary',
                                                   color_mode="rgb",
                                                    shuffle=False,
                                                    target_size = (224,224),
                                                   classes={'No Mask': 0,'Mask': 1})

import numpy as np 
import pandas as pd


import seaborn as sn
from tensorflow import keras
from sklearn.metrics import confusion_matrix, classification_report
from keras.models import Sequential
from keras.layers import Dense, Dropout, GlobalMaxPooling2D, GlobalAveragePooling2D, Conv2D, MaxPooling2D, BatchNormalization, Flatten
from keras.preprocessing.image import ImageDataGenerator
import matplotlib.pyplot as plt

def build_model(MobileNet, nodes1, nodes2, nodes3, drop_rate, activation):
    return Sequential([
        MobileNet,
        GlobalMaxPooling2D(),
        Dense(nodes1,kernel_initializer='he_uniform'),
        Activation('relu'),
        Dropout(drop_rate),
        Dense(nodes2,kernel_initializer='he_uniform'),
        Activation('relu'),
        Dropout(drop_rate),
        Dense(nodes2,kernel_initializer='he_uniform'),
        Activation('relu'),
        Dropout(drop_rate),
        Dense(1,activation='sigmoid')
    ])
def train_model(model, epochs, learning_rate):
   checkpoint_filepath = '/tmp/checkpointNew'
   earlyStopping = tf.keras.callbacks.EarlyStopping(
        patience=5,
        monitor="val_accuracy",
        verbose=1,)
   model_checkpoint_callback = tf.keras.callbacks.ModelCheckpoint(
       filepath=checkpoint_filepath,
    save_weights_only=True,
    monitor='val_accuracy',
    mode='max',
    save_best_only=True,
    save_freq="epoch")
   lrd = tf.keras.callbacks.ReduceLROnPlateau(monitor = 'val_loss',patience = 3,verbose = 1,factor = 0.50, min_lr = 1e-10)
   adam = keras.optimizers.Adam(learning_rate=learning_rate)
   METRICS = [
      tf.keras.metrics.BinaryAccuracy(name='accuracy'),
      tf.keras.metrics.Precision(name='precision'),
      tf.keras.metrics.Recall(name='recall'),  
      tf.keras.metrics.AUC(name='auc'),
]
   model.compile(optimizer=adam, loss='binary_crossentropy', metrics=METRICS)
   history = model.fit(training_set, validation_data = valid_set,validation_steps = 100, batch_size = 512, steps_per_epoch= 200,  epochs = epochs,
                        callbacks=[model_checkpoint_callback,lrd])
   return history
def plot_metrics(model, history, test):
    print("Accuracy of model on testing data : " , model.evaluate(test_set)[1]*100 , "%")
    fig, (ax1, ax2,ax3,ax4,ax5) = plt.subplots(1,5, figsize= (20,5))
    fig.suptitle(" Metrics evaluation of the model ")

    ax1.plot(range(1, len(history.history['accuracy']) + 1), history.history['accuracy'])
    ax1.plot(range(1, len(history.history['val_accuracy']) + 1), history.history['val_accuracy'])
    ax1.set_title('History of Accuracy')
    ax1.set_xlabel('Epochs')
    ax1.set_ylabel('Accuracy')
    ax1.legend(['training', 'validation'])


    ax2.plot(range(1, len(history.history['loss']) + 1), history.history['loss'])
    ax2.plot(range(1, len(history.history['val_loss']) + 1), history.history['val_loss'])
    ax2.set_title('History of Loss')
    ax2.set_xlabel('Epochs')
    ax2.set_ylabel('Loss')
    ax2.legend(['training', 'validation'])
    
    ax3.plot(range(1, len(history.history['auc']) + 1), history.history['auc'])
    ax3.plot(range(1, len(history.history['val_auc']) + 1), history.history['val_auc'])
    ax3.set_title('History of AUC')
    ax3.set_xlabel('Epochs')
    ax3.set_ylabel('AUC')
    ax3.legend(['training', 'validation'])
    
    ax4.plot(range(1, len(history.history['precision']) + 1), history.history['precision'])
    ax4.plot(range(1, len(history.history['val_precision']) + 1), history.history['val_precision'])
    ax4.set_title('History of Precision')
    ax4.set_xlabel('Epochs')
    ax4.set_ylabel('Precision')
    ax4.legend(['training', 'validation'])

    ax5.plot(range(1, len(history.history['recall']) + 1), history.history['recall'])
    ax5.plot(range(1, len(history.history['val_recall']) + 1), history.history['val_recall'])
    ax5.set_title('History of Recall')
    ax5.set_xlabel('Epochs')
    ax5.set_ylabel('Recall')
    ax5.legend(['training', 'validation'])
    plt.show()
def test_model(model, test_set):
    y_pred = model.predict(test_set)
    y_result = []
    for p in y_pred:
        y_result.append(int(p >= 0.5))
    
    y_actual = []
    for i in range(len(test_set)):
        for p in test_set[i][1]:
            y_actual.append(int(p >= 0.5))
    
    print(classification_report(y_actual, y_result))
    
    cm = tf.math.confusion_matrix(labels = y_actual, predictions = y_result)

    plt.figure(figsize = (10, 8))
    sn.heatmap(cm, annot = True, fmt = 'd')
    plt.xlabel('Predicted')
    plt.ylabel('Truth')
def CNN(MobileNet, dense_nodes1,dense_nodes2,dense_nodes3, drop, activation, epochs, lr):
    model = build_model(MobileNet, dense_nodes1,dense_nodes2,dense_nodes3, drop, activation)
    model.summary()
    
    history = train_model(model, epochs, lr)
    
    plot_metrics(model, history, test_set)
    
    test_model(model, test_set)
    return model

mobilenet = tf.keras.applications.MobileNetV2(include_top = False, input_shape = (224, 224, 3), weights = 'imagenet', pooling = "Max")
for layer in mobilenet.layers:
    layer.trainable=True
nodes1 = 256
nodes2 = 128
nodes3 = 64
drop_rate = 0.3
activation = 'sigmoid'
epochs = 20
lr = 0.0001

model = CNN(mobilenet, nodes1,nodes2,nodes3, drop_rate, activation, epochs, lr)

from keras.models import load_model

model.save('model_weights.h5')

model_json = model.to_json()
with open("model.json","w") as json_file:
    json_file.write(model_json)

from google.colab import files
files.download('model.json')
files.download('model_weights.h5')

